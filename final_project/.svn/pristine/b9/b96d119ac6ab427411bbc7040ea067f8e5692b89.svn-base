package kr.or.ddit.ent.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.emp.service.EmpService;
import kr.or.ddit.emp.vo.EmpVO;
import kr.or.ddit.ent.service.EntService;
import kr.or.ddit.ent.util.ArticlePage;
import kr.or.ddit.ent.vo.EntVO;
import kr.or.ddit.ent.vo.WardVO;
import kr.or.ddit.security.CustomUser;

@RequestMapping("/ent")
@Controller
public class EntController {
	
	private static final Logger logger = LoggerFactory.getLogger(EntController.class);
	
	@Autowired 
	EntService entService;
	
	@Autowired
	EmpService empService;
	
	// 입원 대기중인 환자 페이지로 가는 ------ 입원 대기중인 환자 정보, 병동의 조직도, 입원 중인 환자의 정보를 가져감    입원에서는 우선 대기중인 환자를 입원 시켜줘야하기 때문에 main으로 잡음
	@GetMapping("/entHome")
	private String entMain(Model model,Authentication auth, @RequestParam(required = false) String keyword) throws Exception {
		
		List<EntVO> waitEtVO = entService.entPatientList(keyword); // 입원 대기 중
		int waitPntCnt = entService.entPatientCount();
		model.addAttribute("waitPnt", waitEtVO);
		model.addAttribute("waitPntCnt", waitPntCnt);
		
		int entVOCnt = entService.entWardPntCount(); // 입원 중인 환자 리스트
		model.addAttribute("entVOCnt", entVOCnt);
		
		int entEmp = entService.getNoPagingWorkerCount();  // 병동 근무 직원 수 
		model.addAttribute("entEmpCnt", entEmp);
		
		List<WardVO> wardVOList = entService.getWard(); // 병동 정보  자리 배치도
		model.addAttribute("wardVOList", wardVOList);   // resultMap 을 이용하여 병동1 : 호실N 의 관계로 가져옴

		CustomUser user = (CustomUser) auth.getPrincipal(); // security
		EmpVO empVO = user.getUser(); // security 세션
		model.addAttribute("loginUser", empVO);
		model.addAttribute("secSelectBox", empService.secSelectBox());
				
		return "ent/entHome";
	}
	
	@GetMapping("/enting")
	private String enting(Model model,Authentication auth, @RequestParam(required = false) String keyword) throws Exception {

		List<EntVO> entVO = entService.entWardPntList(keyword); // 입원 중
		int entVOCnt = entService.entWardPntCount();
		model.addAttribute("entVO", entVO);
		model.addAttribute("entVOCnt", entVOCnt);
		
		int waitPntCnt = entService.entPatientCount(); // 입원 대기 중
		model.addAttribute("waitPntCnt", waitPntCnt);

		List<WardVO> wardVOList = entService.getWard(); // 병동 정보 자리 배치도 
		model.addAttribute("wardVOList", wardVOList);   // resultMap 을 이용하여 병동1 : 호실N 의 관계로 가져옴
		
		int entEmp = entService.getNoPagingWorkerCount();  // 병동 근무 직원 수 
		model.addAttribute("entEmpCnt", entEmp);
		
		CustomUser user = (CustomUser) auth.getPrincipal();
		EmpVO empVO = user.getUser();
		model.addAttribute("loginUser", empVO);
		model.addAttribute("secSelectBox", empService.secSelectBox());
				
		return "ent/enting";
	}

	@GetMapping("/entEmp")
	private String entEmp(Model model,Authentication auth,
						  @RequestParam(defaultValue = "1") int currentPage, 
						  @RequestParam(required = false, defaultValue = "8") int size,
						  @RequestParam(required = false) String keyword) throws Exception {

		CustomUser user = (CustomUser) auth.getPrincipal();
		EmpVO empVO = user.getUser();
		model.addAttribute("loginUser", empVO);
		model.addAttribute("secSelectBox", empService.secSelectBox());
		
		List<EntVO> entVO = entService.entWardPntList(keyword);  // 입원 중
		int entVOCnt = entService.entWardPntCount();
		model.addAttribute("entVO", entVO);
		model.addAttribute("entVOCnt", entVOCnt);

		List<EntVO> waitEtVO = entService.entPatientList(keyword); // 입원 대기 중
		int waitPntCnt = entService.entPatientCount();
		model.addAttribute("waitPnt", waitEtVO);
		model.addAttribute("waitPntCnt", waitPntCnt);
		
		int entEmp = entService.getNoPagingWorkerCount();  // 병동 근무 직원 수 
		model.addAttribute("entEmpCnt", entEmp);
		
	    int start = currentPage * size - (size - 1);
	    int end = currentPage * size;

	    Map<String, Object> map = new HashMap<String, Object>();
	    map.put("start", start);
	    map.put("end", end);
	    map.put("keyword", keyword);
		
		List<EntVO> entWorker = entService.getEntWorker(map);
		// 병동 근무 직원 전부를 세는게 아니라 페이징에 필요한 개수만 셈  이유 : 총 개수에 따라 페이징 이되는데 검색을 하게 되면 페이징이 되지 않음 때문에 만들어줌
		int entWorkerCount = entService.getEntWorkerCount(keyword);  
		
	    model.addAttribute("page", new ArticlePage(entWorkerCount, currentPage, size, 5));
	    model.addAttribute("total", entWorkerCount);
		model.addAttribute("entWorker", entWorker);
		
		return "ent/entEmp";
	}
	
	// Modal에 환자 상세 정보를 출력하는 메서드
	@PostMapping("/pntModal")
	@ResponseBody
	private EntVO pntModal(Model model, @RequestParam String pntCd) throws Exception {
		EntVO waitPntDetail = entService.patientDetail(pntCd);
		
		return waitPntDetail;
	}
	
	@PostMapping("/getDiet")
	@ResponseBody
	private List<EntVO> getDietList() throws Exception {
		return entService.getDietList();
	}
	
	@GetMapping("/getRoom")
	@ResponseBody
	private List<EntVO> getRoom(@RequestParam String roomCls)throws Exception {
		List<EntVO> liEntVO = entService.getRoom(roomCls);

		return  liEntVO;
	}
	
	@GetMapping("/saveRoom")
	@ResponseBody
	private int saveRoom(@RequestParam Map<String, Object> map) throws Exception {
		logger.info(map.toString());
		int saveRst = entService.saveRoom(map);
		logger.info("saveRst : " + saveRst);
		
		return saveRst;
	}
	
	// 등록 버튼을 누르면 테두리 있는 애가 선택되어 입원 환자로 상태코드 및 ent테이블에 추가되는 코드	
	@PostMapping("/updateEnt")
	@ResponseBody
	private int uppdateEnt(@RequestParam Map<String, Object> map)throws Exception  {
		logger.info(map.toString());
		int res = entService.updateEnts(map);
		
		return res;
	}
	
	// 나중에 환자 디테일 정보 가지고 오는 쿼리 짜자~~~~~~~~~~~~~~~~~~~~~~
	@PostMapping("/getEntDetail")
	@ResponseBody
	private EntVO getEntDetail(@RequestParam String pntCd)throws Exception  {
		logger.info("getEntDetail : " + pntCd);
		EntVO entVO = new EntVO();
		
		entVO = entService.getEntDetail(pntCd);
		
		return entVO;
	}
	
	@GetMapping("/getCareNote")
	@ResponseBody
	private List<EntVO> getCareNote(@RequestParam String entCd)throws Exception {
		List<EntVO> careNote = entService.getCareNote(entCd);
		return careNote;
	}
	
	@GetMapping("/getVital")
	@ResponseBody
	private List<EntVO> getVital(@RequestParam String pntCd)throws Exception {
		List<EntVO> vital = entService.getVital(pntCd);
		return vital;
	}
	
	@GetMapping("/insertVital")
	@ResponseBody
	private int insertVital(@RequestParam Map<String, Object> entVO)throws Exception  {
		logger.info("entVO" + entVO);
		return entService.insertVital(entVO);
	}

	@GetMapping("/insertCareNote")
	@ResponseBody
	private int insertCareNote(@RequestParam Map<String, Object> entVO)throws Exception  {
		logger.info("entVO" + entVO);
		return entService.insertCareNote(entVO);
	}

	@PostMapping("/getEntEmpDetail")
	@ResponseBody
	private EntVO getEntEmpDetail(@RequestParam String empCd)throws Exception  {
		logger.info("entVO" + empCd);
		return entService.getEntEmpDetail(empCd);
	}
	
}
