package kr.or.ddit.emp.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.emp.service.EmpService;
import kr.or.ddit.emp.service.impl.EmpServiceImpl;
import kr.or.ddit.emp.vo.EmpVO;
import kr.or.ddit.security.CustomUser;

/**
 * @FileName : EmpController.java
 * @Project : final_project
 * @Date : 2022. 3. 17.
 * @작성자 : LSW
 * @변경이력 :
 * @프로그램 설명 : 직원 컨트롤러
 */
@Controller
@RequestMapping("/emp")
public class EmpController {

	private static final Logger log = LoggerFactory.getLogger(EmpController.class);

	@Autowired
	EmpService empService;
	
	/**
	 * @param 
	 * @return List<empVO>
	 * 직원 전체 목록 출력
	 */
	@GetMapping("/home")
	public String empList(Model model,@RequestParam Map<String, String> secCd,Authentication auth) {
		
		log.info(" :::: 직원 전체 목록 호출 :::: ");
		List<EmpVO> empList = empService.empList();
		//	진료부 직원 목록
		List<EmpVO> medList = empService.medicalDept();
		
		//	간호부 직원 목록
		List<EmpVO> nurList = empService.nurseDept();
		
		//	의료/행정부 직원 목록
		List<EmpVO> adminList = empService.adminDept();
		CustomUser user = (CustomUser) auth.getPrincipal();
		EmpVO empVO = user.getUser();
				
		model.addAttribute("loginUser", empVO);
		model.addAttribute("secSelectBox", empService.secSelectBox());
		model.addAttribute("list", empList);
		model.addAttribute("medList", medList);
		model.addAttribute("nurList", nurList);
		model.addAttribute("adminList", adminList);
		
		log.info("list : " + empList);
		// WEB-INF/views/*/*.jsp 패턴으로 정의
		return "emp/home";
	}
	
	
	/**
	 * @param model
	 * @return empVO
	 * 직원 상세조회
	 */
	@ResponseBody
	@GetMapping("/detail")
	public EmpVO selectOne(Model model, @RequestParam String empCd) {
		
		log.info(" :::: 직원 상세보기 호출 :::: ");
		EmpVO empVO = empService.selectOne(empCd);
		
		model.addAttribute("EmpVO", empVO);
		
		return empVO;
	}
	
	
	/**
	 * @param model
	 * @param empVO
	 * @return int
	 * 직원 등록
	 */
	@ResponseBody
	@GetMapping("/create")
	public int createEmp(@Validated @ModelAttribute EmpVO empVO,BindingResult result) {
		log.info("EmpVO : " + empVO);
		log.info(" :::: 직원 등록하기 호출 :::: ");
		
 				//검증 오류 발생
				if(result.hasErrors()) {
					
					List<ObjectError> allErrors = result.getAllErrors();
					List<ObjectError> globalErrors = result.getGlobalErrors();
					List<FieldError> fieldErrors = result.getFieldErrors();
					//validation 중에 어떤 오류가 나왔는지 확인..
					for(int i=0;i<allErrors.size();i++) {
						ObjectError objectError = allErrors.get(i);
						log.info("objectError : " + objectError);
					}
					
					for(ObjectError objectError : globalErrors) {
						log.info("objectError : " + objectError);
					}
					
					for(FieldError fieldError : fieldErrors) {
						log.info("fieldError : " + fieldError.getDefaultMessage());
					}
					
					//redirect(X) => 데이터를 보낼 수 없음
					//forwaridng(O)
					return 0;
					}
		
					int res = empService.create(empVO);
					log.info("res : "  + res);
					return res;
			}
	
	/**
	 * @param model
	 * @param empCd
	 * @return 삭제 성공 시 1
	 * 직원 삭제 
	 */
	@ResponseBody
	@GetMapping("/delEmp")
	public int deleteEmp(Model model, @RequestParam String empCd) {
		log.info("empCd :" + empCd);
		log.info(" :::: 직원 삭제하기 호출 :::: ");
		
		int result = empService.delete(empCd);
		
		return result; 
	}
	
	/**
	 * @param empVO
	 * @return 수정 성공 시 1
	 * 직원정보 수정
	 */
	@GetMapping("/update")
	@ResponseBody
	public int updateEmp(@RequestParam EmpVO empVO) {
		log.info("empVO :" + empVO);
		log.info(" :::: 직원 수정하기 호출 :::: ");
		
		int result = empService.update(empVO);
		
		return result;
	}
}